# -*- coding: utf-8 -*-
"""LegalMate - 中文法律智能助手.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJFULLPicf0_VJeu5tK8IbG5VxR-1dv-
"""

# 🔧 Step 1: Install necessary libraries
!pip install -q sentence-transformers faiss-cpu openai gradio

# 📦 Step 2: Import libraries
from sentence_transformers import SentenceTransformer
import numpy as np
import faiss
import gradio as gr
from transformers import pipeline

# 📝 Step 3: Sample U.S. contract clauses (NDA)
legal_docs = [
    "Section 1: Purpose. The purpose of this Agreement is to establish a confidential relationship between the parties.",
    "Section 3: Confidential Information. Any non-public, proprietary, or confidential information disclosed by either party shall be treated as confidential.",
    "Section 5: Non-Disclosure Obligations. The Receiving Party agrees to hold the Disclosing Party’s Confidential Information in strict confidence and shall not disclose it to any third party.",
    "Section 9: Governing Law. This Agreement shall be governed by and construed in accordance with the laws of the State of California."
]

# 🤖 Step 5: Encode clauses and build FAISS index
embedder = SentenceTransformer('all-MiniLM-L6-v2')
embeddings = embedder.encode(legal_docs)
dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(np.array(embeddings))

# 🧠 Step 5: 建立 Hugging Face QA Pipeline（使用 flan-t5-base）
qa_pipeline = pipeline("text2text-generation", model="google/flan-t5-large")

# 💬 Step 6: 問答函式
def search_and_answer(user_question):
    try:
        # 語意檢索最相關條文
        query_vec = embedder.encode([user_question])
        _, indices = index.search(np.array(query_vec), k=1)
        matched_clause = legal_docs[indices[0][0]]

        # 建立 prompt 給 T5 模型
        prompt = f"""You are a legal assistant for a U.S. law firm. Your job is to explain legal contract clauses in plain, professional English.

Given the following clause from a contract:

"{matched_clause}"

Please answer the question below using a full sentence and professional tone, as if you were helping a client understand the clause.

Question:
{user_question}

Answer:"""

        # 使用 Hugging Face pipeline 回答
        response = qa_pipeline(prompt, max_new_tokens=128, do_sample=False)[0]['generated_text']
        return f"📄 Matched clause:\n{matched_clause}\n\n💡 Answer:\n{response}"

    except Exception as e:
        return f"❌ Error: {str(e)}"

# 🌐 Step 7: Gradio UI
gr.Interface(
    fn=search_and_answer,
    inputs=gr.Textbox(lines=2, label="Enter your legal question:"),
    outputs=gr.Textbox(label="AI Answer"),
    title="LegalMate – AI Legal Assistant (Hugging Face Version)"
).launch(share=True, debug=True)